/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface VestingModuleFactoryInterface extends utils.Interface {
  functions: {
    "createVestingModule(address,uint256)": FunctionFragment;
    "implementation()": FunctionFragment;
    "predictVestingModuleAddress(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createVestingModule"
      | "implementation"
      | "predictVestingModuleAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createVestingModule",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "predictVestingModuleAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createVestingModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictVestingModuleAddress",
    data: BytesLike
  ): Result;

  events: {
    "CreateVestingModule(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateVestingModule"): EventFragment;
}

export interface CreateVestingModuleEventObject {
  vestingModule: string;
  beneficiary: string;
  vestingPeriod: BigNumber;
}
export type CreateVestingModuleEvent = TypedEvent<
  [string, string, BigNumber],
  CreateVestingModuleEventObject
>;

export type CreateVestingModuleEventFilter =
  TypedEventFilter<CreateVestingModuleEvent>;

export interface VestingModuleFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VestingModuleFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createVestingModule(
      beneficiary: PromiseOrValue<string>,
      vestingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    predictVestingModuleAddress(
      beneficiary: PromiseOrValue<string>,
      vestingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { predictedAddress: string; exists: boolean }
    >;
  };

  createVestingModule(
    beneficiary: PromiseOrValue<string>,
    vestingPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  implementation(overrides?: CallOverrides): Promise<string>;

  predictVestingModuleAddress(
    beneficiary: PromiseOrValue<string>,
    vestingPeriod: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { predictedAddress: string; exists: boolean }>;

  callStatic: {
    createVestingModule(
      beneficiary: PromiseOrValue<string>,
      vestingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    predictVestingModuleAddress(
      beneficiary: PromiseOrValue<string>,
      vestingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { predictedAddress: string; exists: boolean }
    >;
  };

  filters: {
    "CreateVestingModule(address,address,uint256)"(
      vestingModule?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      vestingPeriod?: null
    ): CreateVestingModuleEventFilter;
    CreateVestingModule(
      vestingModule?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      vestingPeriod?: null
    ): CreateVestingModuleEventFilter;
  };

  estimateGas: {
    createVestingModule(
      beneficiary: PromiseOrValue<string>,
      vestingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    predictVestingModuleAddress(
      beneficiary: PromiseOrValue<string>,
      vestingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createVestingModule(
      beneficiary: PromiseOrValue<string>,
      vestingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    predictVestingModuleAddress(
      beneficiary: PromiseOrValue<string>,
      vestingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
