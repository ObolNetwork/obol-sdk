/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace VestingModule {
  export type VestingStreamStruct = {
    token: PromiseOrValue<string>;
    vestingStart: PromiseOrValue<BigNumberish>;
    total: PromiseOrValue<BigNumberish>;
    released: PromiseOrValue<BigNumberish>;
  };

  export type VestingStreamStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    token: string;
    vestingStart: BigNumber;
    total: BigNumber;
    released: BigNumber;
  };
}

export interface VestingModuleInterface extends utils.Interface {
  functions: {
    "beneficiary()": FunctionFragment;
    "createVestingStreams(address[])": FunctionFragment;
    "numVestingStreams()": FunctionFragment;
    "releaseFromVesting(uint256[])": FunctionFragment;
    "released(address)": FunctionFragment;
    "vested(uint256)": FunctionFragment;
    "vestedAndUnreleased(uint256)": FunctionFragment;
    "vesting(address)": FunctionFragment;
    "vestingPeriod()": FunctionFragment;
    "vestingStream(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "beneficiary"
      | "createVestingStreams"
      | "numVestingStreams"
      | "releaseFromVesting"
      | "released"
      | "vested"
      | "vestedAndUnreleased"
      | "vesting"
      | "vestingPeriod"
      | "vestingStream"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createVestingStreams",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "numVestingStreams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseFromVesting",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "released",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vested",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vestedAndUnreleased",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vesting",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingStream",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVestingStreams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numVestingStreams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseFromVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "released", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vested", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestedAndUnreleased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vesting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingStream",
    data: BytesLike
  ): Result;

  events: {
    "CreateVestingStream(uint256,address,uint256)": EventFragment;
    "ReceiveETH(uint256)": EventFragment;
    "ReleaseFromVestingStream(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateVestingStream"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiveETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleaseFromVestingStream"): EventFragment;
}

export interface CreateVestingStreamEventObject {
  id: BigNumber;
  token: string;
  amount: BigNumber;
}
export type CreateVestingStreamEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  CreateVestingStreamEventObject
>;

export type CreateVestingStreamEventFilter =
  TypedEventFilter<CreateVestingStreamEvent>;

export interface ReceiveETHEventObject {
  amount: BigNumber;
}
export type ReceiveETHEvent = TypedEvent<[BigNumber], ReceiveETHEventObject>;

export type ReceiveETHEventFilter = TypedEventFilter<ReceiveETHEvent>;

export interface ReleaseFromVestingStreamEventObject {
  id: BigNumber;
  amount: BigNumber;
}
export type ReleaseFromVestingStreamEvent = TypedEvent<
  [BigNumber, BigNumber],
  ReleaseFromVestingStreamEventObject
>;

export type ReleaseFromVestingStreamEventFilter =
  TypedEventFilter<ReleaseFromVestingStreamEvent>;

export interface VestingModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VestingModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    createVestingStreams(
      tokens: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    numVestingStreams(overrides?: CallOverrides): Promise<[BigNumber]>;

    releaseFromVesting(
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    released(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vested(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vestedAndUnreleased(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vesting(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vestingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    vestingStream(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [VestingModule.VestingStreamStructOutput] & {
        vs: VestingModule.VestingStreamStructOutput;
      }
    >;
  };

  beneficiary(overrides?: CallOverrides): Promise<string>;

  createVestingStreams(
    tokens: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  numVestingStreams(overrides?: CallOverrides): Promise<BigNumber>;

  releaseFromVesting(
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  released(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vested(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vestedAndUnreleased(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vesting(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vestingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  vestingStream(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<VestingModule.VestingStreamStructOutput>;

  callStatic: {
    beneficiary(overrides?: CallOverrides): Promise<string>;

    createVestingStreams(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    numVestingStreams(overrides?: CallOverrides): Promise<BigNumber>;

    releaseFromVesting(
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    released(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vested(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vestedAndUnreleased(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vesting(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vestingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    vestingStream(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<VestingModule.VestingStreamStructOutput>;
  };

  filters: {
    "CreateVestingStream(uint256,address,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): CreateVestingStreamEventFilter;
    CreateVestingStream(
      id?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): CreateVestingStreamEventFilter;

    "ReceiveETH(uint256)"(amount?: null): ReceiveETHEventFilter;
    ReceiveETH(amount?: null): ReceiveETHEventFilter;

    "ReleaseFromVestingStream(uint256,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ReleaseFromVestingStreamEventFilter;
    ReleaseFromVestingStream(
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ReleaseFromVestingStreamEventFilter;
  };

  estimateGas: {
    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    createVestingStreams(
      tokens: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    numVestingStreams(overrides?: CallOverrides): Promise<BigNumber>;

    releaseFromVesting(
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    released(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vested(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vestedAndUnreleased(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vesting(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vestingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    vestingStream(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createVestingStreams(
      tokens: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    numVestingStreams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseFromVesting(
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    released(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vested(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vestedAndUnreleased(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vesting(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vestingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestingStream(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
